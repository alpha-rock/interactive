function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
Copyright (c) 2018-2019 Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import * as React from 'react';
import Block from '../block/block.js';
// Captions - aka Caption, CaptionLabel
export var Caption1 = function Caption1(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-caption1"
  }, props, {
    font: props.font || 'font200',
    color: props.color || 'colorSecondary'
  }));
};
export var Caption2 = function Caption2(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-caption2"
  }, props, {
    font: props.font || 'font250',
    color: props.color || 'colorSecondary'
  }));
}; // Display

export var Display = function Display(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-display"
  }, props, {
    font: props.font || 'font1100',
    color: props.color || 'colorPrimary'
  }));
}; // Headings

export var H1 = function H1(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-h1",
    as: props.as || 'h1'
  }, props, {
    font: props.font || 'font1000',
    color: props.color || 'colorPrimary'
  }));
};
export var H2 = function H2(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-h2",
    as: props.as || 'h2'
  }, props, {
    font: props.font || 'font900',
    color: props.color || 'colorPrimary'
  }));
};
export var H3 = function H3(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-h3",
    as: props.as || 'h3'
  }, props, {
    font: props.font || 'font800',
    color: props.color || 'colorPrimary'
  }));
};
export var H4 = function H4(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-h4",
    as: props.as || 'h4'
  }, props, {
    font: props.font || 'font700',
    color: props.color || 'colorPrimary'
  }));
};
export var H5 = function H5(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-h5",
    as: props.as || 'h5'
  }, props, {
    font: props.font || 'font600',
    color: props.color || 'colorPrimary'
  }));
};
export var H6 = function H6(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-h6",
    as: props.as || 'h6'
  }, props, {
    font: props.font || 'font500',
    color: props.color || 'colorPrimary'
  }));
}; // Labels - aka Label1, Label2

export var Label1 = function Label1(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-label1"
  }, props, {
    font: props.font || 'font350',
    color: props.color || 'colorPrimary'
  }));
};
export var Label2 = function Label2(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-label2"
  }, props, {
    font: props.font || 'font450',
    color: props.color || 'colorPrimary'
  }));
}; // Paragraphs - Paragraph1, Paragraph2

export var Paragraph1 = function Paragraph1(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-p1",
    as: props.as || 'p'
  }, props, {
    font: props.font || 'font300',
    color: props.color || 'colorPrimary'
  }));
};
export var Paragraph2 = function Paragraph2(props) {
  return React.createElement(Block, _extends({
    "data-baseweb": "typo-p2",
    as: props.as || 'p'
  }, props, {
    font: props.font || 'font400',
    color: props.color || 'colorPrimary'
  }));
};