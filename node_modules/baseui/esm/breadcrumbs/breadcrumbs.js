function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/*
Copyright (c) 2018-2019 Uber Technologies, Inc.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
import React, { Children } from 'react';
import { LocaleContext } from '../locale/index.js';
import ChevronRight from '../icon/chevron-right.js';
import { StyledRoot, StyledSeparator, StyledList, StyledListItem } from './styled-components.js';
import { getOverrides, mergeOverrides } from '../helpers/overrides.js';
export function BreadcrumbsRoot(props) {
  var _props$overrides = props.overrides,
      overrides = _props$overrides === void 0 ? {} : _props$overrides;
  var numChildren = Children.count(props.children);
  var childrenWithSeparators = [];

  var _getOverrides = getOverrides(overrides.Root, StyledRoot),
      _getOverrides2 = _slicedToArray(_getOverrides, 2),
      Root = _getOverrides2[0],
      baseRootProps = _getOverrides2[1];

  var _getOverrides3 = getOverrides(overrides.Icon, ChevronRight),
      _getOverrides4 = _slicedToArray(_getOverrides3, 2),
      Icon = _getOverrides4[0],
      baseIconProps = _getOverrides4[1];

  var _getOverrides5 = getOverrides(overrides.List, StyledList),
      _getOverrides6 = _slicedToArray(_getOverrides5, 2),
      List = _getOverrides6[0],
      baseListProps = _getOverrides6[1];

  var _getOverrides7 = getOverrides(overrides.ListItem, StyledListItem),
      _getOverrides8 = _slicedToArray(_getOverrides7, 2),
      ListItem = _getOverrides8[0],
      baseListItemProps = _getOverrides8[1];

  var _getOverrides9 = getOverrides(overrides.Separator, StyledSeparator),
      _getOverrides10 = _slicedToArray(_getOverrides9, 2),
      Separator = _getOverrides10[0],
      baseSeparatorProps = _getOverrides10[1];

  var iconOverrides = mergeOverrides({
    Svg: {
      style: {
        verticalAlign: 'text-bottom'
      }
    }
  }, // $FlowFixMe
  baseIconProps && baseIconProps.overrides); // $FlowFixMe

  baseIconProps.overrides = iconOverrides;
  Children.forEach(props.children, function (child, index) {
    childrenWithSeparators.push(React.createElement(ListItem, _extends({
      key: "breadcrumb-item-".concat(index),
      $itemIndex: index
    }, baseListItemProps), child, index !== numChildren - 1 && React.createElement(Separator, _extends({}, baseSeparatorProps, {
      key: "separator-".concat(index)
    }), React.createElement(Icon, baseIconProps))));
  });
  return React.createElement(Root, _extends({
    "aria-label": props.ariaLabel || (props.locale ? props.locale.ariaLabel : ''),
    "data-baseweb": "breadcrumbs"
  }, baseRootProps), React.createElement(List, baseListProps, childrenWithSeparators));
}

function Breadcrumbs(props) {
  return React.createElement(LocaleContext.Consumer, null, function (locale) {
    return React.createElement(BreadcrumbsRoot, _extends({}, props, {
      locale: locale.breadcrumbs
    }));
  });
}

Breadcrumbs.defaultProps = {
  overrides: {}
};
export default Breadcrumbs;